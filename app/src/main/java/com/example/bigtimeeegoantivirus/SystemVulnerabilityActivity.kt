package com.example.bigtimeeegoantivirus

import android.os.Bundle
import android.util.Base64
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.EditText
import android.widget.ProgressBar
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import okhttp3.*
import org.json.JSONObject
import java.io.IOException
import java.util.concurrent.TimeUnit

class SystemVulnerabilityActivity : AppCompatActivity() {

    private lateinit var tvScanStatus: TextView
    private lateinit var tvScanResult: TextView
    private lateinit var progressBar: ProgressBar
    private lateinit var btnStartScan: Button
    private lateinit var etUrl: EditText
    private val client = OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .writeTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_system_vulnerability)

        tvScanStatus = findViewById(R.id.tvScanStatus)
        tvScanResult = findViewById(R.id.tvScanResult)
        progressBar = findViewById(R.id.progressBar)
        btnStartScan = findViewById(R.id.btnStartScan)
        etUrl = findViewById(R.id.etUrl)

        btnStartScan.setOnClickListener {
            val urlToScan = etUrl.text.toString().trim()
            if (urlToScan.isNotEmpty()) {
                startVulnerabilityScan(urlToScan)
            } else {
                tvScanStatus.text = "‚ö†Ô∏è Please enter a valid URL"
            }
        }
    }

    private fun startVulnerabilityScan(urlToScan: String) {
        tvScanStatus.text = "üîç Scanning for vulnerabilities..."
        progressBar.visibility = View.VISIBLE
        tvScanResult.visibility = View.GONE

        // Encode the URL in Base64 without padding
        val encodedUrl = Base64.encodeToString(urlToScan.toByteArray(), Base64.NO_WRAP)

        val url = "https://www.virustotal.com/api/v3/urls/$encodedUrl"

        val request = Request.Builder()
            .url(url)
            .get()
            .addHeader("x-apikey", "870df8edc61e52371c259645ea8370a766b29310d4b6e827f95deff7de35486d")
            .build()

        client.newCall(request).enqueue(object : Callback {
            override fun onFailure(call: Call, e: IOException) {
                runOnUiThread {
                    Log.e("NetworkError", "Request failed: ${e.message}")
                    tvScanStatus.text = "‚ö†Ô∏è Scan Failed: Network Error"
                    progressBar.visibility = View.GONE
                    tvScanResult.text = "‚ùå Unable to connect to security servers"
                    tvScanResult.visibility = View.VISIBLE
                }
            }

            override fun onResponse(call: Call, response: Response) {
                if (!response.isSuccessful) {
                    runOnUiThread {
                        Log.e("NetworkError", "Unexpected response code: ${response.code}")
                        tvScanStatus.text = "‚ö†Ô∏è Scan Failed: Unexpected Response"
                        progressBar.visibility = View.GONE
                        tvScanResult.text = "‚ùå Server error occurred"
                        tvScanResult.visibility = View.VISIBLE
                    }
                    return
                }

                val jsonData = response.body?.string()
                val vulnerabilities = parseVulnerabilities(jsonData)

                runOnUiThread {
                    tvScanStatus.text = "‚úÖ Scan Complete"
                    progressBar.visibility = View.GONE
                    tvScanResult.text = vulnerabilities
                    tvScanResult.visibility = View.VISIBLE
                }
            }
        })
    }

    private fun parseVulnerabilities(jsonData: String?): String {
        return try {
            val jsonObject = JSONObject(jsonData ?: "{}")
            val count = jsonObject.getJSONObject("data")
                .getJSONObject("attributes")
                .getJSONObject("last_analysis_stats")
                .getInt("malicious")

            if (count > 0) {
                "‚ö†Ô∏è $count vulnerabilities found! Update your system."
            } else {
                "‚úÖ No vulnerabilities detected!"
            }
        } catch (e: Exception) {
            "‚ö†Ô∏è Error parsing scan results."
        }
    }
}

